{"version":3,"file":"fetch.min.js","sources":["../src/fetch.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The core/fetch module allows you to make web service requests to the Moodle API.\n *\n * @module     core/fetch\n * @copyright  2023 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Cfg from 'core/config';\nimport PendingPromise from './pending';\n\n/**\n * Normalise the component name to remove the core_ prefix.\n *\n * @param {string} component\n * @returns {string}\n */\nconst normaliseComponent = (component) => component.replace(/^core_/, '');\n\n/**\n * Get the Request object for a given API request.\n *\n * @param {string} component The frankenstyle component name\n * @param {string} endpoint The endpoint within the componet to call\n * @param {object} params\n * @param {object} [params.params = {}] The parameters to pass to the API\n * @param {string|Object|FormData} [params.body = null] The HTTP method to use\n * @param {string} [params.method = \"GET\"] The HTTP method to use\n * @returns {Request}\n */\nconst getRequest = (\n    component,\n    endpoint,\n    {\n        params = {},\n        body = null,\n        method = 'GET',\n    }\n) => {\n    const url = new URL(`${Cfg.apibase}rest/v2/${component}/${endpoint}`);\n    const options = {\n        method,\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n    };\n\n    Object.entries(params).forEach(([key, value]) => {\n        url.searchParams.append(key, value);\n    });\n\n    if (body) {\n        if (body instanceof FormData) {\n            options.body = body;\n        } else if (body instanceof Object) {\n            options.body = JSON.stringify(body);\n        } else {\n            options.body = body;\n        }\n    }\n\n    return new Request(url, options);\n};\n\n/**\n * Make a request to the Moodle API.\n *\n * @param {string} component The frankenstyle component name\n * @param {string} action The component action to perform\n * @param {object} params\n * @param {object} [params.params = {}] The parameters to pass to the API\n * @param {string|Object|FormData} [params.body = null] The HTTP method to use\n * @param {string} [params.method = \"GET\"] The HTTP method to use\n * @returns {Promise<object>}\n */\nconst request = async(\n    component,\n    action,\n    {\n        params = {},\n        body = null,\n        method = 'GET',\n    } = {},\n) => {\n    const pending = new PendingPromise(`Requesting ${component}/${action} with ${method}`);\n    const result = await fetch(\n        getRequest(\n            normaliseComponent(component),\n            action,\n            {params, method, body},\n        ),\n    );\n\n    pending.resolve();\n\n    if (result.ok) {\n        return result.json();\n    }\n\n    throw new Error(result.statusText);\n};\n\n/**\n * Make a request to the Moodle API.\n *\n * @param {string} component The frankenstyle component name\n * @param {string} action The component action to perform\n * @param {object} params\n * @param {object} [params.params = {}] The parameters to pass to the API\n * @returns {Promise<object>}\n */\nconst performGet = (\n    component,\n    action,\n    {\n        params = {},\n    } = {},\n) => request(\n    component,\n    action,\n    {params, method: 'GET'},\n);\n\n/**\n * Make a request to the Moodle API.\n *\n * @param {string} component The frankenstyle component name\n * @param {string} action The component action to perform\n * @param {object} params\n * @param {object} [params.params = {}] The parameters to pass to the API\n * @returns {Promise<object>}\n */\nconst performHead = (\n    component,\n    action,\n    {\n        params = {},\n    } = {},\n) => request(\n    component,\n    action,\n    {params, method: 'HEAD'},\n);\n\n/**\n * Make a request to the Moodle API.\n *\n * @param {string} component The frankenstyle component name\n * @param {string} action The component action to perform\n * @param {object} params\n * @param {string|Object|FormData} params.body The HTTP method to use\n * @returns {Promise<object>}\n */\nconst performPost = (\n    component,\n    action,\n    {\n        body,\n    } = {},\n) => request(\n    component,\n    action,\n    {body, method: 'POST'},\n);\n\n/**\n * Make a request to the Moodle API.\n *\n * @param {string} component The frankenstyle component name\n * @param {string} action The component action to perform\n * @param {object} params\n * @param {string|Object|FormData} params.body The HTTP method to use\n * @returns {Promise<object>}\n */\nconst performPut = (\n    component,\n    action,\n    {\n        body,\n    } = {},\n) => request(\n    component,\n    action,\n    {body, method: 'POST'},\n);\n\n/**\n * Make a request to the Moodle API.\n *\n * @param {string} component The frankenstyle component name\n * @param {string} action The component action to perform\n * @param {object} params\n * @param {object} [params.params = {}] The parameters to pass to the API\n * @param {string|Object|FormData} [params.body = null] The HTTP method to use\n * @returns {Promise<object>}\n */\nconst performDelete = (\n    component,\n    action,\n    {\n        params = {},\n        body = null,\n    } = {},\n) => request(\n    component,\n    action,\n    {\n        body,\n        params,\n        method: 'DELETE',\n    },\n);\n\nexport {\n    request,\n    performGet,\n    performHead,\n    performPost,\n    performPut,\n    performDelete,\n};\n"],"names":["normaliseComponent","component","replace","getRequest","endpoint","params","body","method","url","URL","Cfg","apibase","options","headers","Object","entries","forEach","_ref2","key","value","searchParams","append","FormData","JSON","stringify","Request","request","async","action","pending","PendingPromise","result","fetch","resolve","ok","json","Error","statusText"],"mappings":";;;;;;;sRAgCMA,mBAAsBC,WAAcA,UAAUC,QAAQ,SAAU,IAahEC,WAAa,CACfF,UACAG,qBACAC,OACIA,OAAS,GADbC,KAEIA,KAAO,KAFXC,OAGIA,OAAS,kBAGPC,IAAM,IAAIC,cAAOC,gBAAIC,2BAAkBV,sBAAaG,WACpDQ,QAAU,CACZL,OAAAA,OACAM,QAAS,QACK,kCACM,4BAIxBC,OAAOC,QAAQV,QAAQW,SAAQC,YAAEC,IAAKC,aAClCX,IAAIY,aAAaC,OAAOH,IAAKC,UAG7Bb,OACIA,gBAAgBgB,SAChBV,QAAQN,KAAOA,KAEfM,QAAQN,KADDA,gBAAgBQ,OACRS,KAAKC,UAAUlB,MAEfA,MAIhB,IAAImB,QAAQjB,IAAKI,UActBc,QAAUC,eACZ1B,UACA2B,YACAvB,OACIA,OAAS,GADbC,KAEIA,KAAO,KAFXC,OAGIA,OAAS,8DACT,SAEEsB,QAAU,IAAIC,sCAA6B7B,sBAAa2B,wBAAerB,SACvEwB,aAAeC,MACjB7B,WACIH,mBAAmBC,WACnB2B,OACA,CAACvB,OAAAA,OAAQE,OAAAA,OAAQD,KAAAA,WAIzBuB,QAAQI,UAEJF,OAAOG,UACAH,OAAOI,aAGZ,IAAIC,MAAML,OAAOM,0DAYR,SACfpC,UACA2B,YACAvB,OACIA,OAAS,2DACT,UACHqB,QACDzB,UACA2B,OACA,CAACvB,OAAAA,OAAQE,OAAQ,8BAYD,SAChBN,UACA2B,YACAvB,OACIA,OAAS,2DACT,UACHqB,QACDzB,UACA2B,OACA,CAACvB,OAAAA,OAAQE,OAAQ,+BAYD,SAChBN,UACA2B,YACAtB,KACIA,6DACA,UACHoB,QACDzB,UACA2B,OACA,CAACtB,KAAAA,KAAMC,OAAQ,8BAYA,SACfN,UACA2B,YACAtB,KACIA,6DACA,UACHoB,QACDzB,UACA2B,OACA,CAACtB,KAAAA,KAAMC,OAAQ,iCAaG,SAClBN,UACA2B,YACAvB,OACIA,OAAS,GADbC,KAEIA,KAAO,6DACP,UACHoB,QACDzB,UACA2B,OACA,CACItB,KAAAA,KACAD,OAAAA,OACAE,OAAQ"}